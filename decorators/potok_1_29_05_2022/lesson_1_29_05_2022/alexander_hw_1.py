"""
## Блок 1
### Easy

1. Написать простую функцию, которая на вход принимает два числа и возвращает результат
их сложения.
2. Записать эту функцию в произвольную переменную. Напечатать эту переменную на экран. Что вы видите?
3. Вызвать функцию суммирования через переменную, в которую вы только что её записали.

### Medium

1. Написать функцию, которая на вход будет принимать произвольное количество аргументов и возвращать их сумму.
2. В сигнатуре функции объявить 4 обязательных аргумента, но оставить возможность передавать в неё сколько угодно
дополнительных аргументов. Попробуйте вызвать функцию в следующих ситуациях и объясните результат:
   - прокинуть в функцию только 1 аргумент
   - прокинуть аргументы таким образом, чтобы обязательный аргумент был передан одновременно позиционно и по ключу
   - создать кортеж со значениями и распаковать его при вызове функции с помощью *
   - создать словарь со значениями и распаковать его при вызове функции с помощью * и **: что наблюдаете? Почему?

### Hard

1. Модифицировать функцию таким образом, чтобы для суммирования брались только обязательные аргументы, первые
2 аргумента из дополнительных позиционных аргументов и любой аргумент из дополнительных аргументов (если они есть),
переданных по ключу (если они есть).

"""

"""
######## EASY #########
"""

# 1. Создана функция суммирования


def easy_sum_func(first, second):
    return first + second


# 2. Результат: <function easy_sum_func at 0x00000182258AA4C0>

any_variable = easy_sum_func
print(any_variable)


# 3. Выведен результат выполнения функции

print(any_variable(2, 3))


"""
######## Medium #########
"""

# 1. Создана функция суммирования


def medium_sum_func(*args):
    return sum(args)


# 2. Объявлена функция с 4 обязательными аргументами и сколько угодно
# дополнительными аргументов

def medium_sum_func_2(one, two, three, four, *args, **kwargs):
    summarize = one + two + three + four
    if args:
        summarize += sum(args)
    if kwargs:
        summarize += sum(kwargs.values())
    return summarize


# 2.1 Если передан только 1 из 4х обязательных аргументов,
# ошибка TypeError


try:
    medium_sum_func_2(1)
except TypeError:
    print(
        "TypeError: medium_sum_func_2() missing 3 required positional" +
        "arguments: 'two', 'three', and 'four'")

# 2.2 Позиционный аргумент был передан 2 раза
# (по ключу и позиционно) - ошибка TypeError

try:
    medium_sum_func_2(1, 2, 3, 4, one=5)
except TypeError:
    print(
        "TypeError: medium_sum_func_2() got multiple " +
        "values for argument 'one'")

# 2.3 Cоздать кортеж со значениями и распаковать его при вызове функции с помощью *

# Функция отработает в штатном режиме, т.к.
# количество распакованных элементов > позиционных
some_tuple = (1, 2, 3, 4, 5, 6)
print(medium_sum_func_2(*some_tuple))

# Функция выкинет ошибку, т.к.
# количество распакованных элементов не соответствует позиционным
some_tuple = (1, 2, 3)
try:
    print(medium_sum_func_2(*some_tuple))
except TypeError:
    print("Что то пошло не так")

# 2.4 Cоздать словарь со значениями и распаковать его при вызове функции
some_dict = {
    'one': 1,
    'two': 2,
    'three': 3,
    'four': 4,
    'five': 5
}

# Все идет по плану, словарь успешно распакован и просуммирован
print(medium_sum_func_2(**some_dict))

# Все пропало - TypeError! Словарь распакованный одной звездочкой
# возвращает ключи словаря
try:
    print(medium_sum_func_2(*some_dict))
except TypeError:
    print("Добавь звезду!")

"""
######## HARD #########
"""


def hard_sum_func(one, two, three, four, *args, **kwargs):
    summarize = one + two + three + four
    if args:
        summarize += sum(args[:2])
    if kwargs:
        summarize += list(kwargs.values())[0]
    return summarize


ar = [2, 2, 2]
dc = {'five': 6, 'six': 5}
print(hard_sum_func(1, 1, 1, 1, *ar, **dc))
